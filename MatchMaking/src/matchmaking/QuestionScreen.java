/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matchmaking;

import java.awt.*;
import java.io.*;
import static java.lang.Integer.parseInt;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import login.log;
import usersPKG.student;

/**
 *
 * @author 072698376
 */
public class QuestionScreen extends javax.swing.JFrame {

    //The test student used to test the methods.
    //THIS NEEDS TO BE CHANGED SO THE STUDENT LOGS IN AND THEIR INFORMATION GETS STORED HERE
    static student test = new student("Answers", "Bubber", 1, 1);

    //The colour of the background of the program.
    Color pink = new Color(255, 192, 203);

    //The global variable that dictates which question is being answered. (Used for positions in arrays/array lists).
    private int globalCount = 0;

    //The files used in the experiment (questions and answers). 
    private static File file = new File("questionarre.txt");
    private static File file2 = new File("answers.txt");
    static Questionnaire q1 = new Questionnaire(getFile(), getFile2(), 16);

    //An array of booleans that checks if a question has already been answered or not.
    private boolean[] a = new boolean[q1.q.length];

    //Since this number is used a lot, I made it a variable that is a lot easier to work with.
    int y = q1.q.length - 1;

    /**
     * Creates new form QuestionScreen
     */
    public QuestionScreen() {
        initComponents();
        repaint();
    }

    public QuestionScreen(student s) {
        initComponents();
        repaint();
        test = s;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        questionPanel1 = new matchmaking.QuestionPanel();
        currentQ = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nextQ = new javax.swing.JButton();
        prevQ = new javax.swing.JButton();
        choice1 = new javax.swing.JRadioButton();
        choice2 = new javax.swing.JRadioButton();
        choice3 = new javax.swing.JRadioButton();
        choice4 = new javax.swing.JRadioButton();
        choice5 = new javax.swing.JRadioButton();
        save = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 102));

        currentQ.setFont(new java.awt.Font("Verdana", 0, 24)); // NOI18N
        currentQ.setText("<Question>");

        jLabel3.setFont(new java.awt.Font("Khmer UI", 3, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("MATCHMAKER");

        javax.swing.GroupLayout questionPanel1Layout = new javax.swing.GroupLayout(questionPanel1);
        questionPanel1.setLayout(questionPanel1Layout);
        questionPanel1Layout.setHorizontalGroup(
            questionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanel1Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, questionPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(currentQ, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        questionPanel1Layout.setVerticalGroup(
            questionPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, questionPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentQ, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        nextQ.setText("Next Question");
        nextQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQActionPerformed(evt);
            }
        });

        prevQ.setText("Previous Question");
        prevQ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevQActionPerformed(evt);
            }
        });

        buttonGroup1.add(choice1);
        choice1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        choice1.setText("Strongly Disagree");

        buttonGroup1.add(choice2);
        choice2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        choice2.setText("Disagree");

        buttonGroup1.add(choice3);
        choice3.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        choice3.setText("Neutral");

        buttonGroup1.add(choice4);
        choice4.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        choice4.setText("Agree");

        buttonGroup1.add(choice5);
        choice5.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        choice5.setText("Strongly Agree");

        save.setText("Save Answers");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(questionPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(choice5)
                    .addComponent(choice4)
                    .addComponent(choice3)
                    .addComponent(choice2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nextQ)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prevQ)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(save))
                    .addComponent(choice1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(questionPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(choice1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choice2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choice3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choice4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(choice5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextQ)
                    .addComponent(prevQ)
                    .addComponent(save))
                .addGap(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method saves the answer to the given question based on the button
     * chosen. AUTHOR: JADEN
     *
     * @param evt This method is called when the button is pressed.
     */
    private void nextQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQActionPerformed
        //An if statement that saves the answer based on the button selected. Details on the saveAnswer method are detailed below.
        if (choice1.isSelected()) {
            saveAnswer(1);
        } else if (choice2.isSelected()) {                                                                                                                                                                                                            //jaden is boosted
            saveAnswer(2);
        } else if (choice3.isSelected()) {
            saveAnswer(3);
        } else if (choice4.isSelected()) {
            saveAnswer(4);
        } else if (choice5.isSelected()) {
            saveAnswer(5);
        }

        if (getGlobalCount() == y) {
            currentQ.setText("Click the save answer button if you're satisfied with your choices!");
        } else {
            //The globalCount is increased by 1, signalling the program to move to the next question for all purposes.
            setGlobalCount(getGlobalCount() + 1);

            //If the globalCount exceeds the length of the questionnaire, it returns to the maximum amount.
            if (getGlobalCount() > y) {
                setGlobalCount(y);
            }

            //Checks which type of question is being asked.
            typeCheck(q1.q[getGlobalCount()].getqType());

            //The text on the GUI changes to the next question.
            currentQ.setText(q1.q[getGlobalCount()].getQ());
        }
    }//GEN-LAST:event_nextQActionPerformed

    /**
     * This method returns to the previous question when the respective button
     * is pressed. AUTHOR: JADEN
     *
     * @param evt This method is called when the button is pressed.
     */
    private void prevQActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevQActionPerformed
        //The globalCount is decreased by 1, signalling the program to move to the previous question for all purposes.
        setGlobalCount(getGlobalCount() - 1);

        //If the globalCount goes below 0, the globalCount returns to 0.
        if (getGlobalCount() < 0) {
            setGlobalCount(0);
        }

        //Checks which type of question is being asked.
        typeCheck(q1.q[getGlobalCount()].getqType());
        //The text on the GUI changes to the previous question.
        currentQ.setText(q1.q[getGlobalCount()].getQ());
    }//GEN-LAST:event_prevQActionPerformed

    /**
     * This method is called at the end of the questionnaire when the answers
     * need to be saved. AUTHOR: JADEN
     *
     * @param evt This method is called when the button is pressed.
     */
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
            //All this method does is call other methos when the button is pressed. Displays the match results.
            saveFinal(test);
            // match();
        } catch (IOException ex) {
            Logger.getLogger(QuestionScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveActionPerformed

    /**
     * This method saves an answer to a given question. AUTHOR: JADEN
     *
     * @param answer The answer selected.
     */
    public void saveAnswer(int answer) {
        //If the question already has an answer, remove the current answer in that index.
        if (getA()[getGlobalCount()] == true) {
            test.removeAnswer(getGlobalCount());
        }

        //Set the answer at the global index wich the answer selected.
        test.setAnswer(getGlobalCount(), answer);

        //Mark the question answered as true.
        getA()[getGlobalCount()] = true;
    }

    /**
     * Checks which type of question is being asked and changes the screen
     * accordingly. AUTHOR: JADEN
     *
     * @param q The question in question.
     */
    public void typeCheck(int x) {
        //Sets all buttons to be visible and changes the text to the agree-disagree scale.
        if (q1.q[getGlobalCount()].getqType() == 1) {
            choice2.setVisible(true);
            choice3.setVisible(true);
            choice4.setVisible(true);

            choice1.setText("Strongly Disagree");
            choice2.setText("Disagree");
            choice3.setText("Neutral");
            choice4.setText("Agree");
            choice5.setText("StronglyAgree");

            //Sets only two buttons to be visible and changes the text to the yes/no choice.
        } else {
            choice2.setVisible(false);
            choice3.setVisible(false);
            choice4.setVisible(false);

            choice1.setText("Yes");
            choice5.setText("No");
        }
    }

    /**
     * This method saves the final answer and prints it to the file. AUTHOR:
     * JADEN
     *
     * @param s The student who is taking the questionnaire.
     */
    public void saveFinal(student s) throws IOException {

        //Create a new printWriter and catch any exceptions.
        FileWriter p = null;
        try {
            p = new FileWriter(new File("answers.txt"), true);
        } catch (IOException ex) {
        }

        //Save the users information.
        p.write(test.getUn() + "," + test.getPw() + "," + test.getGender() + "," + test.getOri() + ",");
        for (int i = 0; i < y; i++) {
            //Loop through and print each answer.
            p.write(test.getAnswer(i) + ",");
        }
        //Print the final answer without the comma delimiter.
        p.write(test.getAnswer(y) + "\r\n");

        p.close();

    }

    //JADEN'S WORK IN PROGRESS METHOD FOR DISPLAYING MATCH RESULTS
    public void match() {
        Scanner sc = null;
        try {
            sc = new Scanner(q1.getFile2());
        } catch (FileNotFoundException ex) {
        }

        int z = 0;
        while (sc.hasNextLine()) {
            z++;
        }
        int count = 0;
        student[] t = new student[z];
        while (sc.hasNextLine()) {
            String g = sc.nextLine();
            String[] h = g.split(",");
            t[count] = new student(h[0], h[1], parseInt(h[2]), parseInt(h[3]));
        }
        sc.close();
        Matching m = new Matching(t);
        student[] e = m.top10(test);
        currentQ.setText(e[0].toString());
    }

    /**
     * The main method. AUTHOR: NETBEANS & JADEN
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException {

        q1.readQuestionnaire();

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuestionScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuestionScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuestionScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuestionScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuestionScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton choice1;
    private javax.swing.JRadioButton choice2;
    private javax.swing.JRadioButton choice3;
    private javax.swing.JRadioButton choice4;
    private javax.swing.JRadioButton choice5;
    private javax.swing.JLabel currentQ;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton nextQ;
    private javax.swing.JButton prevQ;
    private matchmaking.QuestionPanel questionPanel1;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables

    //PRIVATE VARIABLES AND THEIR METHODS
    /**
     * @return the file
     */
    public static File getFile() {
        return file;
    }

    /**
     * @param aFile the file to set
     */
    public static void setFile(File aFile) {
        file = aFile;
    }

    /**
     * @return the file2
     */
    public static File getFile2() {
        return file2;
    }

    /**
     * @param aFile2 the file2 to set
     */
    public static void setFile2(File aFile2) {
        file2 = aFile2;
    }

    /**
     * @return the globalCount
     */
    public int getGlobalCount() {
        return globalCount;
    }

    /**
     * @param globalCount the globalCount to set
     */
    public void setGlobalCount(int globalCount) {
        this.globalCount = globalCount;
    }

    /**
     * @return the a
     */
    public boolean[] getA() {
        return a;
    }

    /**
     * @param a the a to set
     */
    public void setA(boolean[] a) {
        this.a = a;
    }

}
